<?xml version="1.0" encoding="utf-8"?>
<svg width="{{ width }}" height="{{ height }}"
    xmlns="http://www.w3.org/2000/svg" version="1.1">
    <style>
        .axis line {
            stroke: {{ axis_color }};
            stroke-width: {{ axis_stroke_width }}px;
        }
        .ticks text {
            font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
            font-size: {{ tick_label_font_size }}px;
            text-anchor: middle;
            alignment-baseline: after-edge;
        }
        .base {
            font-family: "Courier New", Courier, monospace;
        }
        .non-canonical, .monomer .base.non-canonical {
            fill: {{ non_canonical_color }};
            font-weight: bold;
        }
        .monomer .base {
            text-anchor: middle;
            alignment-baseline: before-edge;
            fill: {{ seq_color }};
        }
        .monomer .non-canonical-monomer {
            font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
            text-anchor: left;
            alignment-baseline: middle;
            text-anchor: start;
        }
        .monomer .base, .monomer .non-canonical-monomer {
            font-size: {{ seq_font_size }}px;
        }
        .intra_x_links {
            stroke: {{ intra_x_link_color}};
            stroke-width: {{ x_link_stroke_width }}px;
            fill: none;
        }
        .inter_x_links {
            stroke: {{ inter_x_link_color}};
            stroke-width: {{ x_link_stroke_width }}px;
            fill: none;
        }
        .nicks {
            stroke: {{ nick_color}};
            stroke-width: {{ nick_stroke_width }}px;
            fill: none;
        }

        .polymer_label {
            font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
            font-size: {{ polymer_label_font_size }}px;
            text-anchor: middle;
            alignment-baseline: before-edge;
            fill: {{ polymer_label_color }};
        }
        .legend {
            font-size: {{ legend_font_size }}px;
        }
        .legend text {
            alignment-baseline: middle;
        }
        .legend .base {
            text-anchor: middle;
        }
        .legend .label {
            font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
        }

        #tooltip {
          font-size: {{ tooltip_font_size }}px;
        }
    </style>

    {% for polymer in polymers %}
    {% set i_row = (loop.index0 / cols)|round(0, 'floor')|int %}
    <g class="polymer" transform="translate({{ (loop.index0 % cols) * (polymer_w + polymer_margin) }}, {{ cum_polymer_h[i_row] + i_row * polymer_margin + polymer_label_font_size + polymer_label_sep }})">
        {% if polymer.label %}
        <text class="polymer_label" x="{{ h_padding + track_w / 2}}" y="-{{ polymer_label_font_size + polymer_label_sep}}">{{ polymer.label }}</text>
        {% endif %}

        {% for seq_track in polymer.seq_tracks %}
        <g class="seq_track" transform="translate({{ h_padding - px_per_nt }}, {{ seq_track.i_track * (track_h + track_sep) }})">
            <!-- axis -->
            <g class="axis" transform="translate(0, {{ code_h + nc_label_sep + nc_label_h + axis_sep }})">
                <line x1="{{ px_per_nt }}" x2="{{ seq_track.len * px_per_nt }}" y1="0" y2="0" />

                <!-- ticks and tick labels -->
                <g class="ticks">
                    {% for tick in seq_track.ticks %}

                    <g transform="translate({{ tick.x * px_per_nt }}, 0)">
                        <line x1="0" x2="0" y1="0" y2="{{ tick_len }}" />
                        <text x="0" y="{{ tick_len + tick_label_sep + tick_label_font_size / 2 }}">{{ tick.label }}</text>
                    </g>
                    {% endfor %}
                </g>
            </g>

            <!-- sequence -->
            <g class="seq">
                {% for monomer in seq_track.seq %}
                {% if monomer.canonical %}
                <g class="monomer" transform="translate({{ (monomer.i_monomer + 1) * px_per_nt }}, {{ nc_label_h + nc_label_sep }})">
                    <text class="base" x="0" y="0"{% if monomer.color %} style="fill: {{ monomer.color }}"{% endif %}>{{ monomer.canonical_code }}</text>
                </g>
                {% else %}
                <g class="monomer" transform="translate({{ (monomer.i_monomer + 1) * px_per_nt }}, {{ nc_label_h + nc_label_sep }})"
                    {% if monomer.tooltip %}
                    onmousemove="showTooltip(evt, '{{ monomer.tooltip|escape }}');"
                    onmouseout="hideTooltip();">
                    {% endif %}
                    <text class="base non-canonical" x="0" y="0"{% if monomer.color %} style="fill: {{ monomer.color }}"{% endif %}>{{ monomer.canonical_code }}</text>
                    <text class="non-canonical-monomer non-canonical" x="0" transform="translate(0.0, -{{ nc_label_sep }}) rotate(-60)"{% if monomer.color %} style="fill: {{ monomer.color }}"{% endif %}>{{ monomer.non_canonical_label }}</text>
                </g>
                {% endif %}
                {% endfor %}
            </g>
        </g>
        {% endfor %}

        <!-- intra-stand crosslinks -->
        <g class="intra_x_links">
            {% for x_link in polymer.x_links %}
            <path
                {% if x_link.tooltip %}
                onmousemove="showTooltip(evt, '{{ x_link.tooltip|escape }}');"
                onmouseout="hideTooltip();"
                {% endif %}
                {% if (x_link.r_pos - x_link.l_pos) < 5 %}
                d="M {{ h_padding + (x_link.l_pos - 1) * px_per_nt + 2 * x_link_stroke_width * x_link.h_offset }}
                     {{ nc_label_h + nc_label_sep * 3/2 + (track_h + track_sep) * x_link.l_track + seq_font_size }}
                   L {{ h_padding + (x_link.r_pos - 1) * px_per_nt + 2 * x_link_stroke_width * x_link.h_offset }}
                    {{ nc_label_h + nc_label_sep/2 + (track_h + track_sep) * x_link.r_track }}"
                {% else %}
                {% set radius = x_link_radius + x_link_stroke_width * 2 * x_link.v_offset %}
                d="M {{ h_padding + (x_link.l_pos - 1) * px_per_nt }}
                     {{ nc_label_h + nc_label_sep/2 + (track_h + track_sep) * x_link.l_track }}
                   a {{ radius }} {{ radius }}
                     1 0 1
                     {{ radius }} -{{ radius }}
                   L {{ h_padding + (x_link.r_pos - 1) * px_per_nt - radius }}
                    {{ nc_label_h + nc_label_sep/2 + (track_h + track_sep) * x_link.r_track - radius }}
                     a {{ radius }} {{ radius }}
                       1 0 1
                       {{ radius }} {{ radius }}"
               {% endif %}
               />
             {% endfor %}
        </g>

        <!-- nicks crosslinks -->
        <g class="nicks">
            {% for nick in polymer.nicks %}
            <line
                {% if nick.tooltip %}
                onmousemove="showTooltip(evt, '{{ nick.tooltip|escape }}');"
                onmouseout="hideTooltip();"
                {% endif %}
                x1="{{ h_padding + (nick.pos - 1 + 0.5) * px_per_nt }}" 
                x2="{{ h_padding + (nick.pos - 1 + 0.5) * px_per_nt }}" 
                y1="{{ nc_label_h + nc_label_sep + (track_h + track_sep) * nick.track }}" 
                y2="{{ nc_label_h + nc_label_sep + seq_font_size + (track_h + track_sep) * nick.track }}"
                />
            {% endfor %}
        </g>
    </g>
    {% endfor %}

    <!-- inter-polymer crosslinks -->
    <g class="inter_x_links">
        {% for x_link in inter_x_links %}          
        <path
            {% if x_link.tooltip %}
            onmousemove="showTooltip(evt, '{{ x_link.tooltip|escape }}');"
            onmouseout="hideTooltip();"
            {% endif %}
            {% if (x_link.l_polymer_col == x_link.r_polymer_col) and ((x_link.r_pos - x_link.l_pos) < 5) %}
            d="M {{ x_link.l_polymer_col * (polymer_w + polymer_margin) + h_padding + (x_link.l_pos - 1) * px_per_nt + 2 * x_link_stroke_width * x_link.h_offset }}
                 {{ polymer_label_font_size + polymer_label_sep + cum_polymer_h[x_link.l_polymer_row] + x_link.l_polymer_row * polymer_margin + nc_label_h + nc_label_sep * 3/2 + (track_h + track_sep) * x_link.l_track + seq_font_size}}
               L {{ x_link.r_polymer_col * (polymer_w + polymer_margin) + h_padding + (x_link.r_pos - 1) * px_per_nt + 2 * x_link_stroke_width * x_link.h_offset }}
                {{ polymer_label_font_size + polymer_label_sep + cum_polymer_h[x_link.r_polymer_row] + x_link.r_polymer_row * polymer_margin + nc_label_h + nc_label_sep/2 + (track_h + track_sep) * x_link.r_track }}"
            {% else %}
            {% set radius = x_link_radius + x_link_stroke_width * 2 * x_link.v_offset %}
            d="M {{ x_link.l_polymer_col * (polymer_w + polymer_margin) + h_padding + (x_link.l_pos - 1) * px_per_nt }}
                 {{ polymer_label_font_size + polymer_label_sep + cum_polymer_h[x_link.l_polymer_row] + x_link.l_polymer_row * polymer_margin + nc_label_h + nc_label_sep/2 + (track_h + track_sep) * x_link.l_track }}
               a {{ radius }} {{ radius }}
                 1 0 1
                 {{ radius }} -{{ radius }}
               L {{ x_link.r_polymer_col * (polymer_w + polymer_margin) + h_padding + (x_link.r_pos - 1) * px_per_nt - radius }}
                {{ polymer_label_font_size + polymer_label_sep + cum_polymer_h[x_link.r_polymer_row] + x_link.r_polymer_row * polymer_margin + nc_label_h + nc_label_sep/2 + (track_h + track_sep) * x_link.r_track - radius }}
                 a {{ radius }} {{ radius }}
                   1 0 1
                   {{ radius }} {{ radius }}"
            {% endif %}
            />
         {% endfor %}
    </g>

    <!-- legend -->
    {% set n_legend = legend_rows|length %}
    <g class="legend" transform="translate({{ h_padding }}, {{ height - (n_legend - 0.5) * legend_font_size - (n_legend - 1) * legend_label_sep }})">
        {% for legend_row in legend_rows %}
        <g transform="translate(0, {{ (legend_font_size + legend_label_sep) * loop.index0 }})">
            {% if legend_row.symbol %}
            <text x="0" y="{{ legend_font_size * 0.1 }}" class="base" style="fill: {{ legend_row.color }}">{{ legend_row.symbol }}</text>
            {% else %}
            <line x1="-{{ legend_font_size / 4 }}" x2="{{ legend_font_size / 4 }}" y1="0" y2="0" style="stroke: {{ legend_row.color }}; stroke-width: {{ legend_row.stroke_width }}px" />
            {% endif %}
            <text class="label" x="{{ legend_font_size * 0.75 }}" y="0">{{ legend_row.label }}</text>
        </g>
        {% endfor %}
    </g>

    <!-- tooltips -->
    <g id="tooltip" style="display: none;">
        <foreignObject x="0" y="0" width="300" height="300">
            <body xmlns="http://www.w3.org/1999/xhtml">
                <style>
                    div {
                        border: 1px solid #000000;
                        border-radius: 4px;
                        background: #ffffff;
                        padding: 2px 4px 2px 4px;
                        width: max-content;
                        height: max-content;
                    }
                </style>
                <div></div>
            </body>
        </foreignObject>
    </g>
    <script>
        var svg = document.getElementsByTagName('svg')[0]
        var tooltip = document.getElementById('tooltip');
        var tooltip_container = tooltip
          .getElementsByTagName('foreignObject')[0]
          .getElementsByTagName('div')[0];
        var evt_pt = svg.createSVGPoint();

        function showTooltip(evt, text) {
            tooltip_container.innerHTML = text;
            positionTooltip(evt);
        }

        function positionTooltip(evt) {
            tooltip.style.display = "block";

            evt_pt.x = evt.clientX;
            evt_pt.y = evt.clientY;
            var cursor_pt =  evt_pt.matrixTransform(svg.getScreenCTM().inverse());

            tooltip.setAttribute('transform', 'translate('
              + (cursor_pt.x + 1).toString()
              + ', '
              + (cursor_pt.y + 1).toString()
              + ')');
        }

        function hideTooltip() {
            var tooltip = document.getElementById("tooltip");
            tooltip.style.display = "none";
        }
    </script>
</svg>